---
title: java mail!
first:  java邮件发送
layout: default
author:
  name: Aliece TT
  url: http://aliecett.wicp.net
---

{% highlight ruby %}

public class MailMessengerService extends Authenticator implements Runnable
{

    private Queue<MimeMessage> mailSpool = new ConcurrentLinkedQueue<MimeMessage> ();
    private Session smtpSession;

    private String smtpHost = "127.0.0.1";
    private PasswordAuthentication authenticationToken;
    private boolean ssl = false;

    private int messagesSent = 0;
    private int messagesFailed = 0;

    private boolean shutdownRequested = false;


    public MailMessengerService ( final String smtpServer )
    {
        this ( smtpServer, null, null, false );
    }

    public MailMessengerService ( final String smtpServer, final String smtpLogin,
                                  final String smtpPassword, boolean ssl )
    {
        this.smtpHost = smtpServer;
        this.ssl = ssl;

        if ( smtpLogin != null && smtpPassword != null )
        {
            authenticationToken = new PasswordAuthentication ( smtpLogin, smtpPassword );
        }

        initSmtpSession ();

        new Thread ( this, "Cybersystem mail messenger service" ).start ();
    }

    private void initSmtpSession ()
    {
        Properties prop = new Properties ();
        prop.setProperty ( "mail.smtp.host", this.smtpHost );
        prop.setProperty ( "mail.transport.protocol", "smtp" );

        if ( authenticationToken != null )
        {
            prop.setProperty ( "mail.smtp.user", authenticationToken.getUserName () );
            prop.setProperty ( "mail.smtp.auth", "true" );

            if ( this.ssl )
            {
                System.getSecurityManager ();
                Security.addProvider ( new com.sun.net.ssl.internal.ssl.Provider () );
                prop.put ( "mail.smtp.port", "465" );
                prop.put ( "mail.smtp.starttls.enable", "true" );
                prop.put ( "mail.smtp.socketFactory.port", "465" );
                prop.put ( "mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory" );
                prop.put ( "mail.smtp.socketFactory.fallback", "false" );
            }

            smtpSession = Session.getInstance ( prop, this );

        }
        else
        {
            smtpSession = Session.getInstance ( prop, null );
        }
    }

    public void shutdown ()
    {
        shutdownRequested = true;

        synchronized ( this )
        {
            notifyAll ();
        }
    }

    @Override
    protected PasswordAuthentication getPasswordAuthentication ()
    {
        return authenticationToken;
    }

    public void run ()
    {
        while ( !shutdownRequested )
        {
            while ( mailSpool.peek () != null )
            {
                deliverMessage ( mailSpool.poll () );
            }

            synchronized ( this )
            {
                try
                {
                    wait ();
                }
                catch ( InterruptedException e )
                {
                    //ignored
                }
            }
        }
    }

    private void deliverMessage ( MimeMessage message )
    {
        try
        {
            Transport smtp = smtpSession.getTransport ();
            smtp.connect ();
            smtp.sendMessage ( message, message.getAllRecipients () );
            smtp.close ();
            messagesSent++;
        }
        catch ( NoSuchProviderException e )
        {
            messagesFailed++;
            e.printStackTrace ();
        }
        catch ( MessagingException e )
        {
            messagesFailed++;
            e.printStackTrace ();
        }
        catch ( Throwable err )
        {
            messagesFailed++;
            err.printStackTrace ();
        }
    }

    public void sendMessage ( String from, String to, String subject, String text )
            throws MessagingException
    {
        MimeMessage message = new MimeMessage ( smtpSession );

        Address fromAddr = new InternetAddress ( from );

        message.setFrom ( fromAddr );
        message.setSender ( fromAddr );
        message.setReplyTo ( new Address[]{ fromAddr } );
        message.setRecipient ( Message.RecipientType.TO, new InternetAddress ( to ) );
        message.setSentDate ( new Date () );

        try
        {
            message.setHeader ( "Subject", MimeUtility.encodeText ( subject, "utf-8", null ) );
        }
        catch ( UnsupportedEncodingException e )
        {
            throw new MessagingException ( e.getMessage (), e );
        }

        message.setHeader ( "content-type", "text/plain" );
        message.setHeader ( "encoding", "utf-8" );
        message.setText ( text, "utf-8" );

        sendMessage ( message );
    }

    public void sendMessage ( MimeMessage message )
    {
        mailSpool.add ( message );

        synchronized ( this )
        {
            notifyAll ();
        }
    }

    public int getMessagesSent ()
    {
        return messagesSent;
    }

    public int getMessagesFailed ()
    {
        return messagesFailed;
    }
}

{% endhighlight %}

{% highlight ruby %}

 public final class Mailer implements IMailer {
      private Logger _logger = LoggerFactory.getLogger(this.getClass());
      private Queue<Message> _queue = new ConcurrentLinkedQueue<Message>();
      private Session session = null;
      private String smtpHost = null;
      private String smtpPort = "0";
      private InternetAddress _fromRecipient = null;
      private ScheduledExecutorService _executor = null;
      
      public Mailer(ScheduledExecutorService executor_) throws IllegalArgumentException, AddressException {
          _executor = executor_;
  
          _executor.scheduleWithFixedDelay(getMonitor(),
                  5000, 5000, TimeUnit.MILLISECONDS);
      }
      protected Runnable getMonitor() {
          return new Runnable() {
              @Override
              public void run() {
                  try {
                      while (true) {
                          // will stop when the queue is empty.
                          Message message = getMessage();
                          if (message == null)
                              break;
  
                          String adrs = "";
                          for (Address adr : message.getRecipients(RecipientType.TO)) {
                              adrs += adr.toString() +";";
                          }
                          _logger.info("sending mail to {}, subject={}", adrs, message.getSubject());
                          // Send our mail message
                          Transport.send(message);
                      }
                  } catch (Exception e) {
                     _logger.error("Failed", e);
                  }
              }
          };
      }
      @Override
      public void sendMail(String to, String subject, String content, String fromRecipient) {
          sendMail(Collections.singletonList(to), subject, content, fromRecipient);
      }
      
      @Override
      public void sendMail(List<String> to, String subject, String content, String fromRecipient) {
          try {
              if (session == null) {
                  //TODO factory
                  Properties props = new Properties();
                  props.setProperty("mail.smtp.host", smtpHost);
                  props.setProperty("mail.smtp.port", smtpPort);
  
                  /*TODO
                  if (session != null)
                      session.close();
         */
                 session = Session.getDefaultInstance(props);
             }
             if (StringUtil.isEmpty(smtpHost)) {
                 throw new IllegalArgumentException("smtp host not set!");
             }
             if (StringUtil.isEmpty(smtpPort)) {
                 throw new IllegalArgumentException("smtp port not set!");
             }
             if (StringUtil.isEmpty(fromRecipient) && _fromRecipient == null) {
                 throw new IllegalArgumentException("Missing from recipient arg!");
             }
 
             InternetAddress ia = _fromRecipient;
            if (fromRecipient != null)
                 ia = new InternetAddress(fromRecipient);
 
             // Prepare our mail message
             Message message = new MimeMessage(session);
            message.setFrom(ia);
 
            InternetAddress dests[] = new InternetAddress[to.size()];
             int i = 0;
             for (String tt : to) {
                 dests[i++] = new InternetAddress(tt);
            }
 
            message.setRecipients(Message.RecipientType.TO, dests);
             message.setSubject(subject);
             message.setContent(content, "text/plain; charset=UTF-8");
 
             _logger.info("queued mail to {}, subject={}", to.toString(), subject);
             _queue.add(message);
         } catch (Exception e) {
             _logger.error("Failed", e);
         }
     }
 
     @Override
     public Message getMessage() {
         return _queue.poll();
     }
    public String getSmtpHost() {
        return smtpHost;
     }
     public String getSmtpPort() {
        return smtpPort;
     }
     public String getFromRecipient() {
         if (_fromRecipient != null)
             return _fromRecipient.getAddress();
         return null;
     }
     public void setFromRecipient(String fromRecipient_) throws AddressException {
         _fromRecipient = new InternetAddress(fromRecipient_);
     }
     public void setSmtpHost(String smtpHost) {
         this.smtpHost = smtpHost;
     }
     public void setSmtpPort(String smtpPort) {
         this.smtpPort = smtpPort;
     }
 }

{% endhighlight %}

public class MailService implements Runnable {

	private final Logger logger = LoggerFactory.getLogger(MailService.class);

	private final Queue<Message> queue = new ConcurrentLinkedQueue<Message>();

	private final Session session;

	private final IStoredSettings settings;

	public MailService(IStoredSettings settings) {
		this.settings = settings;

		final String mailUser = settings.getString(Keys.mail.username, null);
		final String mailPassword = settings.getString(Keys.mail.password, null);
		final boolean smtps = settings.getBoolean(Keys.mail.smtps, false);
		boolean authenticate = !StringUtils.isEmpty(mailUser) && !StringUtils.isEmpty(mailPassword);
		String server = settings.getString(Keys.mail.server, "");
		if (StringUtils.isEmpty(server)) {
			session = null;
			return;
		}
		int port = settings.getInteger(Keys.mail.port, 25);
		boolean isGMail = false;
		if (server.equals("smtp.gmail.com")) {
			port = 465;
			isGMail = true;
		}

		Properties props = new Properties();
		props.setProperty("mail.smtp.host", server);
		props.setProperty("mail.smtp.port", String.valueOf(port));
		props.setProperty("mail.smtp.auth", String.valueOf(authenticate));
		props.setProperty("mail.smtp.auths", String.valueOf(authenticate));

		if (isGMail || smtps) {
			props.setProperty("mail.smtp.starttls.enable", "true");
			props.put("mail.smtp.socketFactory.port", String.valueOf(port));
			props.put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory");
			props.put("mail.smtp.socketFactory.fallback", "false");
		}

		if (!StringUtils.isEmpty(mailUser) && !StringUtils.isEmpty(mailPassword)) {
			// SMTP requires authentication
			session = Session.getInstance(props, new Authenticator() {
				@Override
				protected PasswordAuthentication getPasswordAuthentication() {
					PasswordAuthentication passwordAuthentication = new PasswordAuthentication(
							mailUser, mailPassword);
					return passwordAuthentication;
				}
			});
		} else {
			// SMTP does not require authentication
			session = Session.getInstance(props);
		}
	}

	/**
	 * Indicates if the mail executor can send emails.
	 *
	 * @return true if the mail executor is ready to send emails
	 */
	public boolean isReady() {
		return session != null;
	}


	/**
	 * Create a message.
	 *
	 * @param toAddresses
	 * @return a message
	 */
	public Message createMessage(String... toAddresses) {
		return createMessage(Arrays.asList(toAddresses));
	}

	/**
	 * Create a message.
	 *
	 * @param toAddresses
	 * @return a message
	 */
	public Message createMessage(List<String> toAddresses) {
		MimeMessage message = new MimeMessage(session);
		try {
			String fromAddress = settings.getString(Keys.mail.fromAddress, null);
			if (StringUtils.isEmpty(fromAddress)) {
				fromAddress = "gitblit@gitblit.com";
			}
			InternetAddress from = new InternetAddress(fromAddress, "Gitblit");
			message.setFrom(from);

			// determine unique set of addresses
			Set<String> uniques = new HashSet<String>();
			for (String address : toAddresses) {
				uniques.add(address.toLowerCase());
			}

			Pattern validEmail = Pattern
					.compile("^([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)$");
			List<InternetAddress> tos = new ArrayList<InternetAddress>();
			for (String address : uniques) {
				if (StringUtils.isEmpty(address)) {
					continue;
				}
				if (validEmail.matcher(address).find()) {
					try {
						tos.add(new InternetAddress(address));
					} catch (Throwable t) {
					}
				}
			}
			message.setRecipients(Message.RecipientType.BCC,
					tos.toArray(new InternetAddress[tos.size()]));
			message.setSentDate(new Date());
		} catch (Exception e) {
			logger.error("Failed to properly create message", e);
		}
		return message;
	}

	/**
	 * Returns the status of the mail queue.
	 *
	 * @return true, if the queue is empty
	 */
	public boolean hasEmptyQueue() {
		return queue.isEmpty();
	}

	/**
	 * Queue's an email message to be sent.
	 *
	 * @param message
	 * @return true if the message was queued
	 */
	public boolean queue(Message message) {
		if (!isReady()) {
			return false;
		}
		try {
			message.saveChanges();
		} catch (Throwable t) {
			logger.error("Failed to save changes to message!", t);
		}
		queue.add(message);
		return true;
	}

	@Override
	public void run() {
		if (!queue.isEmpty()) {
			if (session != null) {
				// send message via mail server
				List<Message> failures = new ArrayList<Message>();
				Message message = null;
				while ((message = queue.poll()) != null) {
					try {
						if (settings.getBoolean(Keys.mail.debug, false)) {
							logger.info("send: " + StringUtils.trimString(message.getSubject(), 60));
						}
						Transport.send(message);
					} catch (Throwable e) {
						logger.error("Failed to send message", e);
						failures.add(message);
					}
				}

				// push the failures back onto the queue for the next cycle
				queue.addAll(failures);
			}
		}
	}

	public void sendNow(Message message) throws Exception {
		Transport.send(message);
	}
}


为什么需要锁（并发控制）？

在多用户环境中，在同一时间可能会有多个用户更新相同的记录，这会产生冲突。这就是著名的并发性问题。

典型的冲突有：

l 丢失更新：一个事务的更新覆盖了其它事务的更新结果，就是所谓的更新丢失。例如：用户A把值从6改为2，用户B把值从2改为6，则用户A丢失了他的更新。

l 脏读：当一个事务读取其它完成一半事务的记录时，就会发生脏读取。例如：用户A,B看到的值都是6，用户B把值改为2，用户A读到的值仍为6。

为了解决这些并发带来的问题。 我们需要引入并发控制机制。

并发控制机制
悲观锁：假定会发生并发冲突，屏蔽一切可能违反数据完整性的操作。[1]

乐观锁：假设不会发生并发冲突，只在提交操作时检查是否违反数据完整性。[1] 乐观锁不能解决脏读的问题。

乐观锁应用
1.      使用自增长的整数表示数据版本号。更新时检查版本号是否一致，比如数据库中数据版本为6，更新提交时version=6+1,使用该version值(=7)与数据库version+1(=7)作比较，如果相等，则可以更新，如果不等则有可能其他程序已更新该记录，所以返回错误。

2.      使用时间戳来实现.

注：对于以上两种方式,Hibernate自带实现方式：在使用乐观锁的字段前加annotation: @Version, Hibernate在更新时自动校验该字段。

悲观锁应用
需要使用数据库的锁机制，比如SQL SERVER 的TABLOCKX（排它表锁） 此选项被选中时，SQL  Server  将在整个表上置排它锁直至该命令或事务结束。这将防止其他进程读取或修改表中的数据。

SqlServer中使用

Begin Tran
select top 1 @TrainNo=T_NO
         from Train_ticket   with (UPDLOCK)   where S_Flag=0

      update Train_ticket
         set T_Name=user,
             T_Time=getdate(),
             S_Flag=1
         where T_NO=@TrainNo
commit

我们在查询的时候使用了with (UPDLOCK)选项,在查询记录的时候我们就对记录加上了更新锁,表示我们即将对此记录进行更新. 注意更新锁和共享锁是不冲突的,也就是其他用户还可以查询此表的内容,但是和更新锁和排它锁是冲突的.所以其他的更新用户就会阻塞.