---
title: Java Pass by value/Pass by reference!
first: Java是严格的pass by value,并没有Pass by reference
layout: default
author:
  name: Aliece TT
  url: http://aliecett.wicp.net
---

Pass By Reference意思是传递对象地址本身而不是传递对象的值。

Pass By Value是指传递一个对象值得拷贝。

Java是严格的pass by value，并没有Pass by reference，不管是原始类型还是引用类型，传递的都是副本(有另外一种说法是传值，但是说传副本更好理解吧，传值通常是相对传址而言)。 如果参数类型是原始类型，那么传过来的就是这个参数的一个副本，也就是这个原始参数的值，这个跟之前所谈的传值是一样的。如果在函数中改变了副本的 值不会改变原始的值.
 
 如果参数类型是引用类型，那么传过来的就是这个引用参数的副本，这个副本存放的是参数的地址。如果在函数中没有改变这个副本的地址，而是改变了地址中的 值，那么在函数内的改变会影响到传入的参数。如果在函数中改变了副本的地址，如new一个，那么副本就指向了一个新的地址，此时传入的参数还是指向原来的 地址，所以不会改变参数的值。

{% highlight ruby %}

	   int i =1,k=2;
	   
	   swap(i,k);
	   
	   System.out.println(i);
	   System.out.println(k);
	   
  public static void swap(int a, int b) {
	   
	   int temp = a;
	   
	   a = b;
	   
	   b= temp;
	   System.out.println(a);
	   System.out.println(b);
   }
   
   
   public static void tricky(Point arg1, Point arg2) { 
	   arg1.x = 100; 
	   arg1.y = 100; 
	   
	   Point temp = arg1; 
	   arg1 = arg2; 
	   arg2 = temp; 
	   } 
	static class Point{
		int x ;
		int y;
		
		public Point(int x, int y) {
			this.x = x; 
			this.y = y; 
		}
	}
	
   Point pnt1 = new Point(0,0); 
   Point pnt2 = new Point(0,0); 
   System.out.println("X: " + pnt1.x + " Y: " +pnt1.y); 
   System.out.println("X: " + pnt2.x + " Y: " +pnt2.y); 
   System.out.println(" "); 
   tricky(pnt1,pnt2); 
   System.out.println("X: " + pnt1.x + " Y:" + pnt1.y); 
   System.out.println("X: " + pnt2.x + " Y: " +pnt2.y);


result:

X: 0 Y: 0
X: 0 Y: 0
 
X: 100 Y:100
X: 0 Y: 0

{% endhighlight %}

单例模式：

{% highlight ruby %}

public class Singleton {
    private static class SingletonHolder {
	private static final Singleton INSTANCE = new Singleton();
    }
    private Singleton (){}
    public static final Singleton getInstance() {
	return SingletonHolder.INSTANCE;
    }
    
    
    public void count() {
    	for(;;){
    		System.out.println(1);
    	}
    }
    
    
    public static void main(String[] args) {
		Singleton s = getInstance();
		s.count();
	}
}

非线程安全实例

public class UnsafeLazyInitialization {
	private static Instance instance;
	public static Instance getInstance() {
		if (instance == null) //1：A线程执行
		instance = new Instance(); //2：B线程执行
		return instance;
	}
}

基于volatile的双重检查锁定的解决方案

public class SafeDoubleCheckedLocking {
    private volatile static Instance instance;

    public static Instance getInstance() {
        if (instance == null) {
            synchronized (SafeDoubleCheckedLocking.class) {
                if (instance == null)
                    instance = new Instance();//instance为volatile，现在没问题了
            }
        }
        return instance;
    }
}
{% endhighlight %}

单例模式不一定是单例，可以通过自定义Classloader去加载这个实例 clone和反射也可以产生不同的实例对象。